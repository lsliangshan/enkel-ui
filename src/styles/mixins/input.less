.hover(@color: @input-hover-border-color) {
    border-color: tint(@color, 20%);
}
.hover-error() {
    border-color: @error-color;
}

.active(@color: @input-hover-border-color) {
    border-color: tint(@color, 20%);
    outline: 0;
    box-shadow: 0 0 0 2px fade(@color, 20%);
}
.active-error() {
    border-color: @error-color;
    outline: 0;
    box-shadow: 0 0 0 2px fade(@error-color, 20%);
}

.disabled() {
    background-color: @input-disabled-bg;
    opacity: 1;
    cursor: @cursor-disabled;
    color: #ccc;
    &:hover {
        .hover(@input-border-color);
    }
}

.input-large() {
    font-size: @font-size-base;
    padding: @input-padding-vertical-large @input-padding-horizontal;
    height: @input-height-large;
}

.input-small() {
    padding: @input-padding-vertical-small @input-padding-horizontal;
    height: @input-height-small;
    border-radius: @btn-border-radius-small;
}

.input() {
    display: inline-block;
    width: 100%;
    height: @input-height-base;
    line-height: @line-height-base;
    padding: @input-padding-vertical-base @input-padding-horizontal;
    font-size: @font-size-small;
    border: 1px solid @input-border-color;
    border-radius: @btn-border-radius;
    color: @input-color;
    background-color: @input-bg;
    background-image: none;
    position: relative;
    cursor: text;
    .placeholder();
    transition: border @transition-time @ease-in-out, background @transition-time @ease-in-out, box-shadow @transition-time @ease-in-out;

    &:hover {
        .hover();
    }

    &:focus {
        .active();
    }

    &[disabled],
    fieldset[disabled] & {
        .disabled();
    }

    // Reset height for textarea
    textarea& {
        max-width: 100%;
        height: auto;
        min-height: @input-height-base;
        vertical-align: bottom;
        font-size: @font-size-base;
    }

    // Size
    &-large {
        .input-large();
    }

    &-small {
        .input-small();
    }
}

.input-error() {
    border: 1px solid @error-color;
    &:hover {
        .hover-error;
    }
    &:focus {
        .active-error;
    }
}

.input-group(@inputClass) {
    display: table;
    width: 100%;
    border-collapse: separate;
    position: relative;
    font-size: @font-size-small;
    top: 1px; // fixed when using in form inline,

    &-large{
        font-size: @font-size-base;
    }

    // Undo padding and float of grid classes
    &[class*="col-"] {
        float: none;
        padding-left: 0;
        padding-right: 0;
    }

    > [class*="col-"] {
        padding-right: 8px;
    }

    &-prepend,
    &-append,
    > .@{inputClass} {
        display: table-cell;

        //&:not(:first-child):not(:last-child) {
        //    border-radius: 0;
        //}
    }
    &-with-prepend .@{inputClass},
    &-with-prepend&-small .@{inputClass}
    {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }
    &-with-append .@{inputClass},
    &-with-append&-small .@{inputClass}
    {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    &-prepend .@{css-prefix}btn,
    &-append .@{css-prefix}btn
    {
        border-color: transparent;
        background-color: transparent;
        color: inherit;
        margin: -(@input-padding-vertical-base + 2) (-@input-padding-horizontal);
    }

    &-prepend,
    &-append
    {
        width: 1px; // To make addon/wrap as small as possible
        white-space: nowrap;
        vertical-align: middle;
    }

    .@{inputClass} {
        width: 100%;
        float: left;
        margin-bottom: 0;
        position: relative;
        z-index: 2;
    }

    &-prepend,
    &-append
    {
        padding: @input-padding-vertical-base @input-padding-horizontal;
        font-size: inherit;
        font-weight: normal;
        line-height: 1;
        color: @input-color;
        text-align: center;
        background-color: @input-group-bg;
        border: 1px solid @input-border-color;
        border-radius: @btn-border-radius;

        // Reset Select's style in addon
        .@{css-prefix}select {
            margin: -(@input-padding-vertical-base + 1) (-@input-padding-horizontal);  // lesshint spaceAroundOperator: false

            &-selection {
                background-color: inherit;
                margin: -1px;
                border: 1px solid transparent;
            }

            &-visible .@{css-prefix}select-selection{
                box-shadow: none;
            }
        }
    }

    // Reset rounded corners
    > span > .@{inputClass}:first-child,
    > .@{inputClass}:first-child,
    &-prepend
    {
        border-bottom-right-radius: 0 !important;
        border-top-right-radius: 0 !important;

        // Reset Select's style in addon
        .@{css-prefix}-select .@{css-prefix}-select-selection {
            border-bottom-right-radius: 0;
            border-top-right-radius: 0;
        }
    }

    &-prepend {
        border-right: 0;
    }
    &-append {
        border-left: 0;
    }

    > .@{inputClass}:last-child,
    &-append
    {
        border-bottom-left-radius: 0 !important;
        border-top-left-radius: 0 !important;

        // Reset Select's style in addon
        .@{css-prefix}-select .@{css-prefix}-select-selection {
            border-bottom-left-radius: 0;
            border-top-left-radius: 0;
        }
    }

    // Sizing options
    &-large .@{inputClass},
    &-large > &-prepend,
    &-large > &-append
    {
        .input-large();
    }

    &-small .@{inputClass},
    &-small > &-prepend,
    &-small > &-append
    {
        .input-small();
    }
}

.input-group-error{
    &-prepend,
    &-append
    {
        background-color: #fff;
        border: 1px solid @error-color;
        .@{css-prefix}select {
            &-selection {
                background-color: inherit;
                border: 1px solid transparent;
            }
        }
    }
    &-prepend {
        border-right: 0;
    }
    &-append {
        border-left: 0;
    }
}

.input_container {
    position: relative;
    cursor: text;
    width: 100%;
    height: 100%;
}

.input_wrapper {
    display: flex;
    align-items: flex-end;
    justify-content: flex-start;
}

.input_container .input_label {
    font-size: 15px;
    color: rgba(0, 0, 0, 0.54);
    font-family: "Roboto", "Helvetica", "Arial", sans-serif;
    line-height: 1;
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
    pointer-events: none;
    -webkit-transform: translate(0, 0) scale(1);
    -moz-transform: translate(0, 0) scale(1);
    -ms-transform: translate(0, 0) scale(1);
    -o-transform: translate(0, 0) scale(1);
    transform: translate(0, 0) scale(1);
    -webkit-transition: all 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    -moz-transition: all 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    -ms-transition: all 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    -o-transition: all 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transition: all 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    transform-origin: top left;
}
.input_container.default .input_label {
    color: rgba(0, 0, 0, 0.54);
}
.input_container.primary .input_label {
    color: @primary-color;
}
.input_container.warning .input_label {
    color: @warning-color;
}
.input_container.info .input_label {
    color: @info-color;
}
.input_container.error .input_label {
    color: @error-color;
}

.input_container.shrink .input_label {
    -webkit-transform: translate(0, -125%) scale(0.75);
    -moz-transform: translate(0, -125%) scale(0.75);
    -ms-transform: translate(0, -125%) scale(0.75);
    -o-transform: translate(0, -125%) scale(0.75);
    transform: translate(0, -125%) scale(0.75);
}

.input_container.default.focus.shrink .input_label {
    color: @primary-color;
}
.input_container.primary.focus.shrink .input_label {
    color: @primary-color;
}
.input_container.info.focus.shrink .input_label {
    color: @info-color;
}
.input_container.warning.focus.shrink .input_label {
    color: @warning-color;
}
.input_container.error.focus.shrink .input_label {
    color: @error-color;
}


.input_container input {
    width: 100%;
    outline: none;
    border: none;
    font-size: 16px;
    line-height: 2;
}
.input_container.default input {
    border-bottom: 1px solid #DDDDDD;
}
.input_container.primary input {
    border-bottom: 1px solid @primary-color;
}
.input_container.info input {
    border-bottom: 1px solid @info-color;
}
.input_container.warning input {
    border-bottom: 1px solid @warning-color;
}
.input_container.error input {
    border-bottom: 1px solid @error-color;
}

.input_container input::placeholder {
    opacity: 0;
    font-size: 16px;
    -webkit-transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    -moz-transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    -ms-transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    -o-transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
}

.input_container.shrink input::placeholder {
    opacity: 0.42;
}

.input_wrapper:before {
    position: absolute;
    left: 0;
    content: '';
    width: 100%;
    border-bottom: 2px solid transparent;
    pointer-events: none;
    -webkit-transition: border-bottom 200ms cubic-bezier(0.4, 0, 0.2, 1);
    -moz-transition: border-bottom 200ms cubic-bezier(0.4, 0, 0.2, 1);
    -ms-transition: border-bottom 200ms cubic-bezier(0.4, 0, 0.2, 1);
    -o-transition: border-bottom 200ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: border-bottom 200ms cubic-bezier(0.4, 0, 0.2, 1);
}

.input_wrapper:after {
    position: absolute;
    left: 0;
    content: '';
    width: 100%;
    -webkit-transform: scaleX(0);
    -moz-transform: scaleX(0);
    -ms-transform: scaleX(0);
    -o-transform: scaleX(0);
    transform: scaleX(0);
    pointer-events: none;
    -webkit-transition: all 200ms cubic-bezier(0.0, 0, 0.2, 1);
    -moz-transition: all 200ms cubic-bezier(0.0, 0, 0.2, 1);
    -ms-transition: all 200ms cubic-bezier(0.0, 0, 0.2, 1);
    -o-transition: all 200ms cubic-bezier(0.0, 0, 0.2, 1);
    transition: all 200ms cubic-bezier(0.0, 0, 0.2, 1);
}
.input_container.default .input_wrapper:after {
    border-bottom: 2px solid @primary-color;
}
.input_container.primary .input_wrapper:after {
    border-bottom: 2px solid @primary-color;
}
.input_container.warning .input_wrapper:after {
    border-bottom: 2px solid @warning-color;
}
.input_container.info .input_wrapper:after {
    border-bottom: 2px solid @info-color;
}
.input_container.error .input_wrapper:after {
    border-bottom: 2px solid @error-color;
}

.input_container.default.hover .input_wrapper:before {
    border-bottom: 2px solid #000000;
}

.input_container.focus .input_wrapper:after {
    -webkit-transform: scaleX(1);
    -moz-transform: scaleX(1);
    -ms-transform: scaleX(1);
    -o-transform: scaleX(1);
    transform: scaleX(1);
}
.input_container.default.focus .input_wrapper:after {
    border-bottom: 2px solid @primary-color;
}
.input_container.primary.focus .input_wrapper:after {
    border-bottom: 2px solid @primary-color;
}
.input_container.info.focus .input_wrapper:after {
    border-bottom: 2px solid @info-color;
}
.input_container.warning.focus .input_wrapper:after {
    border-bottom: 2px solid @warning-color;
}
.input_container.error.focus .input_wrapper:after {
    border-bottom: 2px solid @error-color;
}

.input_container .input_tips {
    position: absolute;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 24px;
    line-height: 24px;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    -webkit-transition: color 200ms cubic-bezier(0.4, 0, 0.2, 1);
    -moz-transition: color 200ms cubic-bezier(0.4, 0, 0.2, 1);
    -ms-transition: color 200ms cubic-bezier(0.4, 0, 0.2, 1);
    -o-transition: color 200ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: color 200ms cubic-bezier(0.4, 0, 0.2, 1);
}
.input_container.primary .input_tips {
    color: @primary-color;
}
.input_container.warning .input_tips {
    color: @warning-color;
}
.input_container.info .input_tips {
    color: @info-color;
}
.input_container.error .input_tips {
    color: @error-color;
}
